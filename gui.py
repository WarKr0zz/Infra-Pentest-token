import tkinter as tk
from tkinter import ttk
from reverse_tcp import launch_reverse_tcp
from nmap_scan import nmap_scan
import threading
import scriptt
from PIL import Image, ImageTk, ImageDraw
import math
from zipbombe import download_and_unzip
import sys
from telnet import execute_telnet_command
from find_file import find_filee


def on_telnet():
    reverse_tcp_port = int(port_entry.get())
    Adip = adresseIPreverse.get()
    thread = threading.Thread(target=execute_telnet_command, args=(Adip, 1524, reverse_tcp_port))
    thread.start()

def on_launch_button_click():
    password = password_entryy.get()
    reverse_tcp_port = int(port_entry.get())
    thread = threading.Thread(target=launch_reverse_tcp, args=(password, reverse_tcp_port))
    thread.start()
    
def execute_download_and_unzip():
    ftp_host = ftp_host_entry.get()
    ftp_user = ftp_user_entry.get()
    ftp_pass = ftp_pass_entry.get()
    netcat_port = int(netcat_port_entry.get())
    zip_file = "zblg.zip"
    netcat_host = ftp_host_entry.get()

    thread = threading.Thread(target=download_and_unzip, args=(ftp_host, ftp_user, ftp_pass, netcat_host, netcat_port, zip_file))
    thread.start()

def nmap_click():
    adresse = adresse_entry.get()
    thread = threading.Thread(target=nmap_scan, args=(adresse,))
    thread.start()

def faille(): 
    target_ip = IP_password_entry.get()
    msf_password = password_entryy.get()
    thread = threading.Thread(target=scriptt.main, args=(target_ip, msf_password))
    thread.start()

def create_circle_mask(size):
    mask = Image.new("L", size, 0)
    draw = ImageDraw.Draw(mask)
    draw.ellipse((0, 0, size[0], size[1]), fill=255)
    return mask

def retrieve_tokens():
    print("Récupération des tokens...")
    thread = threading.Thread(target=find_filee)
    thread.start()

def animate_image(canvas, images, image_index, angle, scale, delay):
    global rotation_angle, image_scale

    # Open the image from the list of image paths
    image_path = images[image_index]
    initial_image = Image.open(image_path)
    image = initial_image.resize((200, 200), Image.ANTIALIAS)

    # Rotate and zoom the image
    rotated_image = image.rotate(angle, resample=Image.BICUBIC, expand=True)
    scale_width = int(rotated_image.width * scale)
    scale_height = int(rotated_image.height * scale)
    scaled_image = rotated_image.resize((scale_width, scale_height), Image.ANTIALIAS)

    # Apply the circle mask
    circle_mask = create_circle_mask(scaled_image.size)
    masked_image = Image.new("RGBA", scaled_image.size, (0, 0, 0, 0))
    masked_image.paste(scaled_image, (0, 0), circle_mask)

    # Convert the masked image to a PhotoImage and display it
    photo_image = ImageTk.PhotoImage(masked_image)
    canvas.delete("all")
    canvas.create_image(canvas.winfo_width() // 2, canvas.winfo_height() // 2, image=photo_image)
    canvas.image = photo_image

    # Update the angle and scale for the next frame
    rotation_angle = (rotation_angle + 1) % 360
    image_scale = 1 + 0.1 * math.sin(math.radians(rotation_angle))

    # Schedule the next frame with a new image index
    next_image_index = (image_index + 1) % len(images)
    canvas.after(delay, animate_image, canvas, images, next_image_index, rotation_angle, image_scale, delay)

# Création de la fenêtre principale
root = tk.Tk()
root.title("Reverse TCP & Nmap Scan")
root.geometry("1700x800")

# Définition des couleurs et des polices
title_font = ("Helvetica", 12, "bold")
instruction_font = ("Helvetica", 10)

bg_color = "#F0F0F0"
section_color1 = "#87CEEB"
section_color2 = "#90EE90"
section_color3 = "#FFB6C1"
section_color4 = "#FFA07A"
section_color5 = "#D8BFD8"
button_color = "#4B0082"

root.configure(bg=bg_color)



# Création des cadres
frame_nmap = ttk.LabelFrame(root, text="Scan Nmap", padding=20)
frame_nmap.grid(row=0, column=0, padx=10, pady=10, sticky="w")

frame_faille = ttk.LabelFrame(root, text="Test des Failles", padding=20)
frame_faille.grid(row=0, column=1, padx=10, pady=10, sticky="w")

frame_reverse_tcp = ttk.LabelFrame(root, text="Reverse TCP", padding=20)
frame_reverse_tcp.grid(row=1, column=0, padx=10, pady=10, sticky="w")

frame_retrieve_tokens = ttk.LabelFrame(root, text="Récupérer les tokens", padding=20)
frame_retrieve_tokens.grid(row=1, column=1, padx=10, pady=10, sticky="w")


frame_download_unzip = ttk.LabelFrame(root, text="Zip Bombe attak", padding=20)
frame_download_unzip.grid(row=2, column=0, padx=10, pady=10, sticky="w")

frame_output = ttk.LabelFrame(root, text="Sortie du script", padding=20)
frame_output.grid(row=2, column=1, padx=10, pady=10, sticky="w")

# Widgets pour le téléchargement et la décompression
download_unzip_instruction = tk.Label(frame_download_unzip, text="Entrez les informations requises pour télécharger et décompresser un fichier zip")
download_unzip_instruction.grid(row=0, column=0, padx=5, pady=5, sticky="w")

ftp_host_label = tk.Label(frame_download_unzip, text="FTP Host")
ftp_host_label.grid(row=1, column=0, padx=5, pady=5, sticky="w")
ftp_host_entry = tk.Entry(frame_download_unzip)
ftp_host_entry.grid(row=1, column=1, padx=5, pady=5)

ftp_user_label = tk.Label(frame_download_unzip, text="FTP User")
ftp_user_label.grid(row=2, column=0, padx=5, pady=5, sticky="w")
ftp_user_entry = tk.Entry(frame_download_unzip)
ftp_user_entry.grid(row=2, column=1, padx=5, pady=5)

ftp_pass_label = tk.Label(frame_download_unzip, text="FTP Password")
ftp_pass_label.grid(row=3, column=0, padx=5, pady=5, sticky="w")
ftp_pass_entry = tk.Entry(frame_download_unzip, show="*")
ftp_pass_entry.grid(row=3, column=1, padx=5, pady=5)

netcat_port_label = tk.Label(frame_download_unzip, text="Netcat Port")
netcat_port_label.grid(row=4, column=0, padx=5, pady=5, sticky="w")
netcat_port_entry = tk.Entry(frame_download_unzip)
netcat_port_entry.grid(row=4, column=1, padx=5, pady=5)
launch_download_unzip_button = tk.Button(frame_download_unzip, text="Exécuter", command=execute_download_and_unzip)
launch_download_unzip_button.grid(row=5, column=0, columnspan=2, padx=5, pady=5)


# Créez un widget Text pour afficher la sortie du script et ajoutez-le au cadre précédemment créé
output_text = tk.Text(frame_output, wrap="word", width=40, height=10)
output_text.grid(row=0, column=0, padx=5, pady=5)

# Redirigez la sortie standard (stdout) vers le widget Text
class TextRedirector(object):
    def __init__(self, widget):
        self.widget = widget

    def write(self, string):
        self.widget.insert("end", string)
        self.widget.see("end")

sys.stdout = TextRedirector(output_text)



download_unzip_instruction.config(font=instruction_font, bg=bg_color)
ftp_host_label.config(font=instruction_font, bg=bg_color)
ftp_user_label.config(font=instruction_font, bg=bg_color)
ftp_pass_label.config(font=instruction_font, bg=bg_color)
netcat_port_label.config(font=instruction_font, bg=bg_color)

ftp_host_entry.config(bg=bg_color)
ftp_user_entry.config(bg=bg_color)
ftp_pass_entry.config(bg=bg_color)
netcat_port_entry.config(bg=bg_color)

launch_download_unzip_button.config(font=title_font, bg=bg_color)

# Appliquer les couleurs aux widgets
download_unzip_frame = tk.Frame(root, bg=section_color5)
download_unzip_instruction.config(bg=section_color5)
ftp_host_label.config(bg=section_color5)
ftp_user_label.config(bg=section_color5)
ftp_pass_label.config(bg=section_color5)
netcat_port_label.config(bg=section_color5)

ftp_host_entry.config(bg=section_color5)
ftp_user_entry.config(bg=section_color5)
ftp_pass_entry.config(bg=section_color5)
netcat_port_entry.config(bg=section_color5)

launch_download_unzip_button.config(bg=section_color4)

# Create a canvas for the image
image_canvas = tk.Canvas(root, width=200, height=200, bg=bg_color, highlightthickness=0)
image_canvas.grid(row=1, column=2, rowspan=2, padx=10, pady=10)

# Widgets pour le scan Nmap
nmap_instruction = tk.Label(frame_nmap, text="Entrez l'adresse IP pour effectuer un scan Nmap")
nmap_instruction.grid(row=0, column=0, padx=5, pady=5, sticky="w")

adresse_entry = tk.Entry(frame_nmap)
adresse_entry.grid(row=1, column=0, padx=5, pady=5)

launch_nmap_button = tk.Button(frame_nmap, text="Scan Nmap", command=nmap_click)
launch_nmap_button.grid(row=2, column=0, padx=5, pady=5)

# Widgets pour le test des failles
faille_instruction = tk.Label(frame_faille, text="Entrez le mot de passe de msfconsole et testez des failles sur la machine victime , Vous devez le lancer préalablement")
faille_instruction.grid(row=0, column=0, padx=5, pady=5, sticky="w")

IP_pass = tk.Label(frame_faille, text="Adresse IP")
IP_pass.grid(row=1, column=0, padx=5, pady=5, sticky="w")
IP_password_entry = tk.Entry(frame_faille)
IP_password_entry.grid(row=1, column=0, padx=5, pady=5)

password_entryy_label = tk.Label(frame_faille, text="Mot de passe MSF")
password_entryy_label.grid(row=2, column=0, padx=5, pady=5, sticky="w")
password_entryy = tk.Entry(frame_faille, show="*")
password_entryy.grid(row=2, column=0, padx=5, pady=5)

launch_test_faille_button = tk.Button(frame_faille, text="Test Faille", command=faille)
launch_test_faille_button.grid(row=3, column=0, padx=5, pady=5)

# Widgets pour le reverse TCP
reverse_tcp_instruction = tk.Label(frame_reverse_tcp, text="Entrez le port pour effectuer un reverse TCP sur la victime")
reverse_tcp_instruction.grid(row=0, column=0, padx=5, pady=5, sticky="w")

session_id_instruction = tk.Label(frame_reverse_tcp, text="Session ID")
session_id_instruction.grid(row=2, column=0, padx=5, pady=5, sticky="w")
session_id_entry = tk.Entry(frame_reverse_tcp)
session_id_entry.grid(row=2, column=0, padx=5, pady=5)

adresseIPreverselabel = tk.Label(frame_reverse_tcp, text="Adresse IP")
adresseIPreverselabel.grid(row=3, column=0, padx=5, pady=5, sticky="w")
adresseIPreverse = tk.Entry(frame_reverse_tcp)
adresseIPreverse.grid(row=3, column=0, padx=5, pady=5)

port_entry_instruction = tk.Label(frame_reverse_tcp, text="Port Reverse TCP")
port_entry_instruction.grid(row=1, column=0, padx=5, pady=5, sticky="w")
port_entry = tk.Entry(frame_reverse_tcp)
port_entry.grid(row=1, column=0, padx=5, pady=5)

launch_reverse_tcp_button = tk.Button(frame_reverse_tcp, text="Lancer Reverse TCP", command=on_launch_button_click)
launch_reverse_tcp_button.grid(row=4, column=0, padx=5, pady=5)
launch_telnet = tk.Button(frame_reverse_tcp, text="via telnet", command=on_telnet)
launch_telnet.grid(row=2, column=1, padx=5, pady=5)
# Widgets pour les toke 
retrieve_tokens_label = tk.Label(frame_retrieve_tokens, text="Récupérer les tokens", font=instruction_font, bg=bg_color)
retrieve_tokens_label.grid(row=0, column=0, padx=5, pady=5, sticky="w")

retrieve_tokens_button = tk.Button(frame_retrieve_tokens, text="Exécuter", command=retrieve_tokens)
retrieve_tokens_button.grid(row=1, column=0, padx=5, pady=5)


# Mise à jour des widgets avec des couleurs et des polices
nmap_instruction.config(font=instruction_font, bg=bg_color)
adresse_entry.config(bg=bg_color)
launch_nmap_button.config(font=title_font, bg=bg_color)
retrieve_tokens_button.config(font=title_font, bg=bg_color)

faille_instruction.config(font=instruction_font, bg=bg_color)

launch_test_faille_button.config(font=title_font, bg=bg_color)

reverse_tcp_instruction.config(font=instruction_font, bg=bg_color)
port_entry.config(bg=bg_color)
launch_reverse_tcp_button.config(font=title_font, bg=bg_color)
# Apply colors to the widgets
nmap_frame = tk.Frame(root, bg=section_color1)
nmap_instruction.config(bg=section_color1)
reverse_tcp_instruction.config(bg=section_color2)
faille_instruction.config(bg=section_color3)

adresse_entry.config(bg=section_color1)
port_entry.config(bg=section_color2)
adresseIPreverse.config(bg=section_color2)
session_id_entry.config(bg=section_color2)
password_entryy.config(bg=section_color3)
IP_password_entry.config(bg=section_color3)

launch_nmap_button.config(bg=section_color4)
launch_test_faille_button.config(bg=section_color4)
launch_reverse_tcp_button.config(bg=section_color4)
retrieve_tokens_button.config(bg=section_color4)

# Image animation
image_paths = ["./prout.jpg", "./1.jpg", "./2.jpg", "./3.jpg", "./4.jpg"]
rotation_angle = 0
image_scale = 1

animate_image(image_canvas, image_paths, 0, rotation_angle, image_scale, 200)

root.mainloop()